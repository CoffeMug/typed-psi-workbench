Here are example of agents that shows the effect of assertions on the typability of the agents


--1-- (new (a : "Ch(Base)")) ( (| "(a,I)" |) | ("In(a)"(x:Base)))
----- This agent type-checks without error, because the assertion (a,I) in the environment of the agent
----- enables the typability of the input agent.

--2-- (| "(a,I)" |) | ("In(a)"(x:Base))
----- This time type-checker complains about the free name a in assertion agent which is not defined in
----- the current type environment. If we add the name a into the type environment, then the agent will type-check with no
----- errors. Note that the type of the name a must be of the form Ch(T).

--3-- (new (a : "Ch(Base)")) ("In(a)" (x:Base))
----- This time the type-checker complains about the assertion (a,I) which is missing from the current environment.
----- Therefore this agent is not typable. Agent number one above is exactly the same as this one but with the appropriate
----- environmental assertion available.

--4-- ((new (a : "Ch(Base)"))((| "(a,I)" |) | "In(a)"(x:Base))) | ((new (b : "Ch(Base)"))((| "(b,O)" |) | '"Out(b)"<c>))
----- This time we use a rather big agent to check that the type-checker is doing its job correctly.
----- This agent is not well-typed because the name c at the last sub-agent is not defined in the environment.
----- If we insert it with its appropriate type (Base) into the type environment, then the agent will type-check without
----- any error.


--5-- (|"(a,I)"|) | "In(a)"(x:Base)| (|"(d,O)"|) | '"Out(d)"<e>
----- This example shows better the effect of environmental assertions enabling typability of an agent.
----- Here if we feed the type environment with all the necessary name-type pairs, the agent will be type-checked
----- without any errors.


--6-- "In(a)"(x:"Ch(Base)").((| "(x,I)" |) | "In(x)"(y:Base))
----- deftype {a:"Ch(Ch(Base))"; "(a,I)"}; 
----- This agent is not well-typed for two reason; first the name a is not defined
----- in the type environment, so we need to define it first. We issue the command 
----- to insert name a with its appropriate type into the
----- current type environment. To type-check the In(a) term, we also need to have
----- the assertion (a,I) in the type environment.
----- If we pass the agent to the type-checker now, the type-checker will not issue
----- raise any error and the agent is typable. 

--6-- "In(a)"(a:"Ch(Base)").((| "(a,I)" |) | (new (a : "Ch(Ch(Base))")) ("In(a)"(y:"Ch(Base)")))
----- This is a good example (good evil example) to see the effect of alpha renaming when there are name clashes
----- in the agent (name a in the input object).
----- If we type-check this agent the type-checker will complain about the missing name a in the type environment.
----- Adding that name with its appropriate type (deftype {a:"Ch(Ch(Base))") in the environment and type-checking the
----- agent again this time the type-checker complains about the missing assertion from the environment ((a,I)).
----- So we need to also add this assertion into the environment (deftype {"(a,I)"}).
----- If we issue the typecheck command one more time, this time the type-checker only issues a warning,
----- which means that the agent is well-typed and the warning is due to the fact that in the restriction
----- agent, the name a will be added to the environment and since this name is already in the environment
----- the type-checker issues the warning. 
----- Issuing the sstep command on this agent will result in the following valid transition:
----- 1 possible derivative(s)
      1 ---
      "" |>
         --|ga(a)|-->
      
         Constraint:
           {| "In( a ) <-> ga" |}
         Solution:
           ([ga := "Out( a )"], " (a^o) ")
         Derivative:
           ((|" (a^i) "|)) |
             ((new a : "Ch(Ch(Base))")( "In( a )"(y : "Ch(Base)") ))
----- This is the only valid transition that the nonrestricted input (the left one) can does independantly.

